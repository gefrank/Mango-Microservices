@page "/ProductDetails/{ProductId:int}"
@using Mango.Blazor.Models
@using Mango.Blazor.Models.Enums
@using Mango.Blazor.Service
@using Mango.Blazor.Service.IService
@using Newtonsoft.Json
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigationManager
@inject HttpClient _http
@inject Mango.Blazor.Service.IService.IProductService _productService
@inject Mango.Blazor.Service.IService.ICartService _cartService
@inject IToastService ToastService

<EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input type="hidden" @bind="product.ProductId" />
    <div class="pt-4">
        <div class="card container" style="border:1px solid #808080;">
            <div class="card-header bg-dark text-light row" style="border-radius: 0px;">
                <div class="col-12 col-md-6">
                    <h1 class="text-white">@product.Name</h1>
                </div>
                <div class="col-12 col-md-6 text-end">
                    <h1 class="text-warning">@string.Format("{0:c}", product.Price)</h1>
                </div>
            </div>
            <div class="card-body">
                <div class="container rounded p-2">
                    <div class="row">
                        <div class="col-12 col-lg-4 p-1 text-center">
                            <img src="@product.ImageUrl" style="border-radius:35px;" width="100%" class="rounded" />
                        </div>
                        <div class="col-12 col-lg-8">
                            <div class="row pl-3">
                                <div class="col-12">
                                    <span class="badge bg-warning text-white p-2">@product.CategoryName</span>
                                    <p class="text-secondary pt-3">@((MarkupString)product.Description)</p>
                                </div>
                            </div>
                            <div class="row mx-0">
                                <InputNumber @bind-Value="product.Count" class="form-control" />
                                <ValidationMessage For="@(() => product.Count)" class="text-danger" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer row bg-dark">
                <div class="col-12 col-md-6 pb-1">
                    <button type="button" class="btn btn-success btn-square form-control btn-lg" style="height:50px;" @onclick="NavigateToIndex">Back to List</button>
                </div>
                <div class="col-12 col-md-6">
                    <button type="submit" class="btn btn-primary form-control btn-lg" style="height:50px;">Add to Cart</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private ProductDTO product = new ProductDTO();

    [Parameter]
    public int ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await _productService.GetProductByIdAsync(ProductId);
        product = JsonConvert.DeserializeObject<ProductDTO>(Convert.ToString(response.Result)!);
    }

    private async Task HandleValidSubmit()
    {
        var userId = "";
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userId = user.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Sub)?.Value;
        }
        else
        {
            ToastService.ShowToast(ToastLevel.Warning, "Please login to add items to cart", "Authentication Required");
            _navigationManager.NavigateTo("/login");
            return;
        }

        CartDTO cartDTO = new CartDTO()
        {
            CartHeader = new CartHeaderDTO
            {
                UserId = userId
            }
        };

        CartDetailsDTO cartDetails = new CartDetailsDTO()
        {
            Count = product.Count,
            ProductId = product.ProductId
        };

        cartDTO.CartDetails = new List<CartDetailsDTO> { cartDetails };

        var response = await _cartService.UpsertCartAsync(cartDTO);

        if (response != null && response.IsSuccess)
        {
            ToastService.ShowToast(ToastLevel.Success, "Item added to cart successfully", "Success");
            _navigationManager.NavigateTo("/cart");
        }
        else
        {
            ToastService.ShowToast(ToastLevel.Error,
            response?.Message ?? "Failed to add item to cart",
            "Error");
        }
    }

    private void NavigateToIndex()
    {
        _navigationManager.NavigateTo("/");
    }
}

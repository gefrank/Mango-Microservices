@page "/register"
@using Mango.Blazor.Service.IService
@using Mango.Blazor.Utility
@using Mango.Blazor.Models
@using Microsoft.AspNetCore.Mvc.Rendering
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="container border p-4">
    <div class="row text-center p-3">
        <h1>Register</h1>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    <EditForm Model="@registrationRequest" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <div class="row">
            <div>
                <div class="col-12 col-md-6 offset-md-3 pb-2">
                    <InputText @bind-Value="registrationRequest.Email" class="form-control" placeholder="Email..." />
                    <ValidationMessage For="@(() => registrationRequest.Email)" class="text-danger" />
                </div>
                <div class="col-12 col-md-6 offset-md-3 pb-2">
                    <InputText @bind-Value="registrationRequest.Name" class="form-control" placeholder="Name..." />
                    <ValidationMessage For="@(() => registrationRequest.Name)" class="text-danger" />
                </div>
                <div class="col-12 col-md-6 offset-md-3 pb-2">
                    <InputText @bind-Value="registrationRequest.PhoneNumber" class="form-control" placeholder="Phone Number..." />
                    <ValidationMessage For="@(() => registrationRequest.PhoneNumber)" class="text-danger" />
                </div>
                <div class="col-12 col-md-6 offset-md-3 pb-2">
                    <InputText @bind-Value="registrationRequest.Password" type="password" class="form-control" placeholder="Password..." />
                    <ValidationMessage For="@(() => registrationRequest.Password)" class="text-danger" />
                </div>
                <div class="col-12 col-md-6 offset-md-3 pb-2">
                    <InputSelect @bind-Value="registrationRequest.Role" class="form-select">
                        <option value="">--Select Role--</option>
                        @foreach (var role in Roles)
                        {
                            <option value="@role.Value">@role.Text</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => registrationRequest.Role)" class="text-danger" />
                </div>
                <div class="col-12 col-md-6 offset-md-3 pb-2">
                    <button type="submit" class="form-control btn btn-success" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Processing...</span>
                        }
                        else
                        {
                            <span>Register</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private RegistrationRequestDTO registrationRequest = new();
    private bool IsProcessing = false;
    private string? ErrorMessage;

    private List<SelectListItem> Roles = new()
{
        new SelectListItem { Text = SD.RoleAdmin, Value = SD.RoleAdmin },
        new SelectListItem { Text = SD.RoleCustomer, Value = SD.RoleCustomer }
    };

    private async Task HandleRegistration()
    {
        IsProcessing = true;
        ErrorMessage = null;

        try
        {
            var result = await AuthService.RegisterAsync(registrationRequest);

            if (result != null && result.IsSuccess)
            {
                if (string.IsNullOrEmpty(registrationRequest.Role))
                {
                    registrationRequest.Role = SD.RoleCustomer;
                }

                var roleAssignmentResult = await AuthService.AssignRoleAsync(registrationRequest);

                if (roleAssignmentResult != null && roleAssignmentResult.IsSuccess)
                {
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    ErrorMessage = roleAssignmentResult?.Message ?? "Failed to assign role";
                }
            }
            else
            {
                ErrorMessage = result?.Message ?? "Registration failed";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An unexpected error occurred";
            Console.WriteLine($"Registration error: {ex}");
        }
        finally
        {
            IsProcessing = false;
        }
    }
}
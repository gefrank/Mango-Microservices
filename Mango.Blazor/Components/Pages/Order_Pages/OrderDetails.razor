@page "/order/details/{OrderId:int}"
@using Mango.Blazor.Models
@using Mango.Blazor.Models.Enums
@using Mango.Blazor.Service.IService
@using Mango.Blazor.Utility
@using System.IdentityModel.Tokens.Jwt
@using Newtonsoft.Json

@inject IOrderService _orderService
@inject IToastService _toastService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

@if (Order == null)
{
    <div class="text-center">
        <img src="/images/loading.gif" alt="Loading..." />
    </div>
}
else
{
    <div class="container">
        <div class="card">
            <div class="card-header bg-dark text-light ml-0">
                <div class="container row">
                    <div class="col-12 d-none d-md-block col-md-6 pb-1 text-warning h3">
                        Order Summary
                    </div>
                    <div class="col-12 col-md-4 offset-md-2 text-right mt-2">
                        <NavLink href="/order" class="btn btn-warning form-control btn-sm">Back to Orders</NavLink>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="container rounded p-2">
                    <div class="row">
                        <div class="col-12 col-lg-6 pb-4">
                            <div class="row my-1">
                                <div class="col-3">Name</div>
                                <div class="col-9">
                                    <input @bind="Order.Name" readonly class="form-control" />
                                </div>
                            </div>

                            <div class="row my-1">
                                <div class="col-3">Phone</div>
                                <div class="col-9">
                                    <input @bind="Order.Phone" readonly class="form-control" />
                                </div>
                            </div>

                            <div class="row my-1">
                                <div class="col-3">Email</div>
                                <div class="col-9">
                                    <input @bind="Order.Email" readonly class="form-control" />
                                </div>
                            </div>
                            <div class="row my-1">
                                <div class="col-3">Order Date</div>
                                <div class="col-9">
                                    <input value="@Order.OrderTime.ToShortDateString()" readonly class="form-control" />
                                </div>
                            </div>

                            @if (IsAdmin)
                            {
                                <div class="row my-1">
                                    <div class="col-3">Session ID</div>
                                    <div class="col-9">
                                        <input @bind="Order.StripeSessionId" readonly class="form-control" />
                                    </div>
                                </div>
                                <div class="row my-1">
                                    <div class="col-3">Payment Intent ID</div>
                                    <div class="col-9">
                                        <input @bind="Order.PaymentIntentId" readonly class="form-control" />
                                    </div>
                                </div>
                            }
                            <div class="row my-1">
                                <div class="col-3">Order Status</div>
                                <div class="col-9">
                                    <input @bind="Order.Status" readonly class="form-control" />
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-5 offset-lg-1">
                            <h4 class="d-flex justify-content-between align-items-center mb-3">
                                <span class="text-warning">Order Summary</span>
                            </h4>
                            <label class="bg-info text-dark text-center form-control my-2">Order Status - @Order.Status</label>

                            <ul class="list-group mb-3">
                                @foreach (var detail in Order.OrderDetails)
                                {
                                    <li class="list-group-item d-flex justify-content-between p-2">
                                        <div class="row container">
                                            <div class="col-8">
                                                <h6 class="my-0 text-white-50">@detail.ProductName</h6>
                                                <small class="text-muted">Price : @detail.Price.ToString("c")</small><br />
                                                <small class="text-muted">Quantity : @detail.Count</small>
                                            </div>
                                            <div class="col-4 text-end">
                                                <p class="text-success">@((detail.Count * detail.Price).ToString("c"))</p>
                                            </div>
                                        </div>
                                    </li>
                                }
                                <li class="list-group-item bg-primary">
                                    <div class="row container">
                                        <div class="col-6">
                                            <h5 class="text-white">TOTAL </h5>
                                        </div>
                                        <div class="col-6 text-end">
                                            <h5 class="text-white">@Order.OrderTotal.ToString("c")</h5>
                                        </div>
                                    </div>
                                </li>
                            </ul>

                            @if (IsAdmin)
                            {
                                @if (Order.Status == SD.Status_Approved)
                                {
                                    <button @onclick="OrderReadyForPickup" class="btn btn-success form-control my-1">Ready for Pickup</button>
                                }
                                @if (Order.Status == SD.Status_ReadyForPickup)
                                {
                                    <button @onclick="CompleteOrder" class="btn btn-success form-control my-1">Complete Order</button>
                                }

                                if (Order.Status == SD.Status_Approved || Order.Status == SD.Status_ReadyForPickup)
                                {
                                    <button @onclick="CancelOrder" class="btn btn-danger form-control my-1">Cancel Order</button>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int OrderId { get; set; }

    private OrderHeaderDTO Order;
    private bool IsAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/login");
            return;
        }

        IsAdmin = user.IsInRole(SD.RoleAdmin);
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        var response = await _orderService.GetOrder(OrderId);
        if (response != null && response.IsSuccess)
        {
            Order = JsonConvert.DeserializeObject<OrderHeaderDTO>(Convert.ToString(response.Result));
            _toastService.ShowToast(ToastLevel.Success, "Order details loaded successfully");
        }
        else
        {
            _toastService.ShowToast(ToastLevel.Error, response?.Message ?? "Failed to load order details");
            _navigationManager.NavigateTo("/order");
        }
    }

    private async Task OrderReadyForPickup()
    {
        var response = await _orderService.UpdateOrderStatus(OrderId, SD.Status_ReadyForPickup);
        if (response != null && response.IsSuccess)
        {
            _toastService.ShowToast(ToastLevel.Success, "Order status updated successfully");
            await LoadOrder();
        }
        else
        {
            _toastService.ShowToast(ToastLevel.Error, response?.Message ?? "Failed to update order status");
        }
    }

    private async Task CompleteOrder()
    {
        var response = await _orderService.UpdateOrderStatus(OrderId, SD.Status_Completed);
        if (response != null && response.IsSuccess)
        {
            _toastService.ShowToast(ToastLevel.Success, "Order completed successfully");
            await LoadOrder();
        }
        else
        {
            _toastService.ShowToast(ToastLevel.Error, response?.Message ?? "Failed to complete order");
        }
    }

    private async Task CancelOrder()
    {
        var response = await _orderService.UpdateOrderStatus(OrderId, SD.Status_Cancelled);
        if (response != null && response.IsSuccess)
        {
            _toastService.ShowToast(ToastLevel.Success, "Order cancelled successfully");
            await LoadOrder();
        }
        else
        {
            _toastService.ShowToast(ToastLevel.Error, response?.Message ?? "Failed to cancel order");
        }
    }
}